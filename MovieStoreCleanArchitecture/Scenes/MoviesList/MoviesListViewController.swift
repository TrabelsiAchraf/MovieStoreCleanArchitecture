//
//  MoviesListViewController.swift
//  MovieStoreCleanArchitecture
//
//  Created by Achraf Trabelsi on 9/27/18.
//  Copyright (c) 2018 Achraf TRABELSI. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire

protocol MoviesListDisplayLogic: class {
    func displayFetchedMovies(viewModel: MoviesList.Fetch.ViewModel)
}

class MoviesListViewController: UITableViewController, MoviesListDisplayLogic {
    
    var interactor: MoviesListBusinessLogic?
    var router: (NSObjectProtocol & MoviesListRoutingLogic & MoviesListDataPassing)?
    var displayedMovies: [MoviesList.Fetch.ViewModel.DisplayedMovie] = []
    
    let cellIdentifier = "MovieTableViewCell"
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = MoviesListInteractor()
        let presenter = MoviesListPresenter()
        let router = MoviesListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        fetchMovies()
    }
    
    // MARK: Fetch movies
    
    func fetchMovies() {
        let request = MoviesList.Fetch.Request()
        interactor?.fetchMovies(request: request)
    }
    
    func displayFetchedMovies(viewModel: MoviesList.Fetch.ViewModel) {
        displayedMovies = viewModel.displayedMovies
        tableView.reloadData()
    }
    
    // MARK: TableView - DataSource
    
    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedMovies.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedMovie = displayedMovies[indexPath.row]
        var cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier)
        if cell == nil {
            cell = UITableViewCell(style: .value1, reuseIdentifier: cellIdentifier)
        }
        cell?.textLabel?.text = displayedMovie.title
        cell?.detailTextLabel?.text = displayedMovie.details
        return cell!
    }
}
